{"version":3,"sources":["Posts.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","this","props","post","map","className","title","body","id","Component","App","fetchData","postStart","a","URL","fetch","then","response","json","console","log","setState","posts","state","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","newfetch","postPerFetch","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2SAyBeA,E,4JApBX,WAEI,OACI,8BACA,6BAEQC,KAAKC,MAAMC,KAAKC,KAAI,SAAAD,GAClB,OAAS,qBAAkBE,UAAU,YAA5B,UACJ,6BAAKF,EAAKG,QACV,6BAAKH,EAAKI,SAFGJ,EAAKK,e,GATzBC,aCwDLC,E,kDAtDb,aAAc,IAAD,8BACX,gBAkBFC,UAnBa,uCAmBH,WAAMC,GAAN,eAAAC,EAAA,6DACAC,EADA,6DAC0DF,EAD1D,uBAEAG,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAC,GACpDE,QAAQC,IAAI,WAAWH,GACvB,EAAKI,SAAS,CACZC,MAAM,GAAD,mBAAK,EAAKC,MAAMD,OAAhB,YAAyBL,SAL5B,2CAnBG,wDA+BbO,aAAa,WACX,GAAGC,OAAOC,YAAcC,SAASC,gBAAgBC,YAC3CF,SAASC,gBAAgBE,aAAa,CACxCX,QAAQC,IAAI,gBACd,IAAIW,EAAS,EAAKR,MAAMS,aACxBD,GAAU,GACV,EAAKV,SAAS,CAACW,aAAaD,IAC5B,EAAKpB,UAAU,EAAKY,MAAMS,gBApC5B,EAAKT,MAAM,CACTS,aAAa,EACbV,MAAM,IAJG,E,qDAQb,WACErB,KAAKU,UAAUV,KAAKsB,MAAMS,cAC1BP,OAAOQ,iBAAiB,SAAShC,KAAKuB,gB,kCAIxC,WACEC,OAAOS,oBAAoB,SAASjC,KAAKuB,gB,oBA2B3C,WAEE,OACE,gCACE,4CACD,cAAC,EAAD,CAAOrB,KAAMF,KAAKsB,MAAMD,e,GAhDbb,aCQH0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BX,M","file":"static/js/main.59aed879.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Posts.css\";\n\nclass Posts extends Component {\n\n    render() {\n        // console.log(\"post\",this.props);\n        return (\n            <div>\n            <ul>\n                {\n                    this.props.post.map(post=>{\n                      return(  <li key={post.id} className=\"postsCard\">\n                           <h4>{post.title}</h4> \n                           <h6>{post.body}</h6>\n                        </li>\n                      )\n                    })\n                }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Posts;\n","import './App.css';\nimport React, { Component } from 'react'\nimport Posts from './Posts';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      postPerFetch:1,\n      posts:[]\n    }\n  }\n  // to initally fetch the data\n  componentDidMount(){\n    this.fetchData(this.state.postPerFetch);\n    window.addEventListener(\"scroll\",this.handleScroll);\n  }\n\n  //to remove the eventlistner\n  componentWillUnmount(){\n    window.removeEventListener(\"scroll\",this.handleScroll)\n  }\n\n  //fetch Data from the Api\n  fetchData=async(postStart)=>{\n      const URL=`https://jsonplaceholder.typicode.com/posts/?_start=${postStart}&_limit=10`;\n      await fetch(URL).then(response=>response.json()).then(response=>{\n        console.log(\"response\",response)\n        this.setState({\n          posts:[...this.state.posts,...response]\n        })\n      })\n\n  }\n\n  // to check whether the scrollbar has reach the end of the screen\n  handleScroll=()=>{\n    if(window.innerHeight + document.documentElement.scrollTop\n      === document.documentElement.offsetHeight){\n        console.log(\"handleScroll\")\n      let newfetch=this.state.postPerFetch;\n      newfetch+=10;\n      this.setState({postPerFetch:newfetch})\n      this.fetchData(this.state.postPerFetch);\n    }\n  }\n\n  render() {\n   \n    return (\n      <div>\n        <h1>Assignment</h1>\n       <Posts post={this.state.posts}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}